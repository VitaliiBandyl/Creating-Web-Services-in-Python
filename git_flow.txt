# Создать репозиторий в папке
git init

# Склонировать (создать локальную копию) репозиторий flask по ssh в папку с именем как у репозитория (нужно настроить ключи ssh)
git clone git@github.com:pallets/flask.git

# Склонировать репозиторий flask по https в папку с именем myflask
git clone https://github.com/pallets/flask.git myflask

# Переключиться на ветку master, ветка должна существовать в репозитории
git checkout master

# Создать ветку feature/my-feature и перейти в нее, ветка не должна существовать
git checkout -b feature/my-feature

# Посмотреть информацию о текущем состоянии репозитория
git status

# Добавить файл my.py в staging area (область подготовки к коммиту)
git add my.py

# Добавить все файлы в текущей папке и её подпапках в staging area
git add .

# Зафиксировать изменения файлов из staging area с сообщением "bugfix in my.py"
git commit -m "bugfix in my.py"

# Зафиксировать все измененные файлы (но не добавленные), без предварительного добавления их в staging area
git commit -am "fixes"

# Посмотреть краткую историю изменений (коммитов)
git log # у git log есть масса параметров - что и как отображать

# Отобразить, что и как изменялось в каждом коммите (каждую измененную строку, как было и как стало)
git log -p

# Добавить существующий репозиторий myrepo на github как родительский для локального под именем origin
git remote add origin git@github.com:mylogin/myrepo.git

# Отправить текущую ветку ветку в родительский репозиторий (origin) в удаленную ветку master и запомнить эту связь
git push -u origin master

# Отправить текущую ветку ветку в родительский репозиторий, если связь между локальной веткой и удаленной уже установлена
git push

# Притащить изменения всех веток из удаленного репозитория в локальный, но не изменять текущие файлы
git fetch

# git fetch + объединить изменения в текущей ветке прилетевшие с сервера с локальными
git pull # может не сработать, если есть незакоммиченные локальные изменения

# Объединить текущую ветку с локальной веткой feature/newbranch
git merge feature/newbranch

# Объединить текущую ветку с локальной веткой feature/newbranch в отдельном коммите
git merge --no-ff feature/newbranch

# Если возникли конфликты во время merge, он приостановится. Найти конфликты, исправить и завершить merge
git status
# [отредактировать файл с конфликтами, лучше через специальные инструменты, но можно и в любом редакторе]
git add .
git commit -m "Conflicts resolved"